//-----------------------------------------------------------------------------
// Entaro ChucK Developer!
// This is a chugin boilerplate, generated by chuginate!
//-----------------------------------------------------------------------------
// NOTE by default, chuginate generates a new UGen subclass in this file
//      but it is possible, of course, to create non-UGen classes in a chugin!
// To modify this generated file for a non-UGen class...
//      1. in QUERY->begin_class(), change "UGen" to a different ChucK class
//         (e.g., `QUERY->begin_class(QUERY, "BFormat", "Object");`)
//      2. remove or commment out the line containing QUERY->add_ugen_func()
//      3. that's it; the rest is no different for UGens/non-UGens
//-----------------------------------------------------------------------------
// NOTE once you have built this into a chugin (BFormat.chug), here are a few
//      helpful tools for testing / probing / verifying your new chugin!
//
// chuginate also generated a BFormat-test.ck boilerplate ChucK program
//      to help test your chugin (see BFormat-test.ck for more instructions)
//
// run `chuck --chugin-probe` to probe what chugins would be loaded, and
//      from where in the chugin search paths
//
// run `chuck -v3 --loop` to see what chugins are actually loaded at runtime,
//      with more info and error reporting than with --chugin-probe
//
// other helpful chugin-related flags include:
//      --chugin:<filename>
//      --chugin-path:(path) / -G(path)
//      --chugin-load:{on/off}
//
// for more information on command-line options:
//      https://chuck.stanford.edu/doc/program/options.html
// for more information on chugins:
//      https://chuck.stanford.edu/extend/
//-----------------------------------------------------------------------------
// happy chucking & chugging!
//-----------------------------------------------------------------------------

// include chugin header
#include "chugin.h"
#include "BFormat.h"

// general includes
#include <iostream>

// declaration of chugin constructor
CK_DLL_CTOR(bformat1_ctor);
CK_DLL_CTOR(bformat1_ctor2);
CK_DLL_DTOR(bformat1_dtor);
CK_DLL_MFUN(bformat1_setGain);
CK_DLL_MFUN(bformat1_getGain);
CK_DLL_TICKF(bformat1_tickf);
t_CKINT bformat1_data_offset = 0;

CK_DLL_CTOR(bformat2_ctor);
CK_DLL_CTOR(bformat2_ctor2);
CK_DLL_DTOR(bformat2_dtor);
CK_DLL_MFUN(bformat2_setGain);
CK_DLL_MFUN(bformat2_getGain);
CK_DLL_TICKF(bformat2_tickf);
t_CKINT bformat2_data_offset = 0;

CK_DLL_CTOR(bformat3_ctor);
CK_DLL_CTOR(bformat3_ctor2);
CK_DLL_DTOR(bformat3_dtor);
CK_DLL_MFUN(bformat3_setGain);
CK_DLL_MFUN(bformat3_getGain);
CK_DLL_TICKF(bformat3_tickf);
t_CKINT bformat3_data_offset = 0;

CK_DLL_CTOR(bformat4_ctor);
CK_DLL_CTOR(bformat4_ctor2);
CK_DLL_DTOR(bformat4_dtor);
CK_DLL_MFUN(bformat4_setGain);
CK_DLL_MFUN(bformat4_getGain);
CK_DLL_TICKF(bformat4_tickf);
t_CKINT bformat4_data_offset = 0;

CK_DLL_CTOR(bformat5_ctor);
CK_DLL_CTOR(bformat5_ctor2);
CK_DLL_DTOR(bformat5_dtor);
CK_DLL_MFUN(bformat5_setGain);
CK_DLL_MFUN(bformat5_getGain);
CK_DLL_TICKF(bformat5_tickf);
t_CKINT bformat5_data_offset = 0;

//-----------------------------------------------------------------------------
// info function: ChucK calls this when loading/probing the chugin
// NOTE: please customize these info fields below; they will be used for
// chugins loading, probing, and package management and documentation
//-----------------------------------------------------------------------------
CK_DLL_INFO(BFormat)
{
    // the version string of this chugin, e.g., "v1.2.1"
    QUERY->setinfo(QUERY, CHUGIN_INFO_CHUGIN_VERSION, "");
    // the author(s) of this chugin, e.g., "Alice Baker & Carl Donut"
    QUERY->setinfo(QUERY, CHUGIN_INFO_AUTHORS, "Everett M. Carpenter");
    // text description of this chugin; what is it? what does it do? who is it for?
    QUERY->setinfo(QUERY, CHUGIN_INFO_DESCRIPTION, "BFormat gain adjustment");
    // (optional) URL of the homepage for this chugin
    QUERY->setinfo(QUERY, CHUGIN_INFO_URL, "");
    // (optional) contact email
    QUERY->setinfo(QUERY, CHUGIN_INFO_EMAIL, "carpee2[@]rpi[.]edu");
}

//-----------------------------------------------------------------------------
// query function: ChucK calls this when loading the chugin
// modify this function to define this chugin's API and language extensions
//-----------------------------------------------------------------------------
CK_DLL_QUERY(BFormat)
{
    // generally, don't change this...
    QUERY->setname(QUERY, "BFormat");
    QUERY->begin_class(QUERY, "BFormat1", "UGen");
    QUERY->add_ctor(QUERY, bformat1_ctor);
    QUERY->add_ctor(QUERY, bformat1_ctor2);
    QUERY->add_arg(QUERY, "float", "gain");
    QUERY->add_dtor(QUERY, bformat1_dtor);
    QUERY->add_ugen_funcf(QUERY, bformat1_tickf, NULL, 4, 4);
    QUERY->add_mfun(QUERY, bformat1_setGain, "float", "gain");
    QUERY->add_arg(QUERY, "float", "gain");
    QUERY->add_mfun(QUERY, bformat1_getGain, "float", "gain");
    bformat1_data_offset = QUERY->add_mvar(QUERY, "int", "@bf_data", false);
    QUERY->end_class(QUERY);

    QUERY->begin_class(QUERY, "BFormat2", "UGen");
    QUERY->add_ctor(QUERY, bformat2_ctor);
    QUERY->add_ctor(QUERY, bformat2_ctor2);
    QUERY->add_arg(QUERY, "float", "gain");
    QUERY->add_dtor(QUERY, bformat2_dtor);
    QUERY->add_ugen_funcf(QUERY, bformat2_tickf, NULL, 9, 9);
    QUERY->add_mfun(QUERY, bformat2_setGain, "float", "gain");
    QUERY->add_arg(QUERY, "float", "gain");
    QUERY->add_mfun(QUERY, bformat2_getGain, "float", "gain");
    bformat2_data_offset = QUERY->add_mvar(QUERY, "int", "@bf_data", false);
    QUERY->end_class(QUERY);

    QUERY->begin_class(QUERY, "BFormat3", "UGen");
    QUERY->add_ctor(QUERY, bformat3_ctor);
    QUERY->add_ctor(QUERY, bformat3_ctor2);
    QUERY->add_arg(QUERY, "float", "gain");
    QUERY->add_dtor(QUERY, bformat3_dtor);
    QUERY->add_ugen_funcf(QUERY, bformat3_tickf, NULL, 16, 16);
    QUERY->add_mfun(QUERY, bformat3_setGain, "float", "gain");
    QUERY->add_arg(QUERY, "float", "gain");
    QUERY->add_mfun(QUERY, bformat3_getGain, "float", "gain");
    bformat3_data_offset = QUERY->add_mvar(QUERY, "int", "@bf_data", false);
    QUERY->end_class(QUERY);

    QUERY->begin_class(QUERY, "BFormat4", "UGen");
    QUERY->add_ctor(QUERY, bformat4_ctor);
    QUERY->add_ctor(QUERY, bformat4_ctor2);
    QUERY->add_arg(QUERY, "float", "gain");
    QUERY->add_dtor(QUERY, bformat4_dtor);
    QUERY->add_ugen_funcf(QUERY, bformat4_tickf, NULL, 25, 25);
    QUERY->add_mfun(QUERY, bformat4_setGain, "float", "gain");
    QUERY->add_arg(QUERY, "float", "gain");
    QUERY->add_mfun(QUERY, bformat4_getGain, "float", "gain");
    bformat4_data_offset = QUERY->add_mvar(QUERY, "int", "@bf_data", false);
    QUERY->end_class(QUERY);

    QUERY->begin_class(QUERY, "BFormat5", "UGen");
    QUERY->add_ctor(QUERY, bformat5_ctor);
    QUERY->add_ctor(QUERY, bformat5_ctor2);
    QUERY->add_arg(QUERY, "float", "gain");
    QUERY->add_dtor(QUERY, bformat5_dtor);
    QUERY->add_ugen_funcf(QUERY, bformat5_tickf, NULL, 36, 36);
    QUERY->add_mfun(QUERY, bformat5_setGain, "float", "gain");
    QUERY->add_arg(QUERY, "float", "gain");
    QUERY->add_mfun(QUERY, bformat5_getGain, "float", "gain");
    bformat5_data_offset = QUERY->add_mvar(QUERY, "int", "@bf_data", false);
    QUERY->end_class(QUERY);

    // wasn't that a breeze?
    return TRUE;
}

// implementation for the default constructor
CK_DLL_CTOR(bformat1_ctor)
{
    // get the offset where we'll store our internal c++ class pointer
    OBJ_MEMBER_INT(SELF, bformat1_data_offset) = 0;

    // instantiate our internal c++ class representation
    BFormat1 *bf1_obj = new BFormat1(API->vm->srate(VM));

    // store the pointer in the ChucK object member
    OBJ_MEMBER_INT(SELF, bformat1_data_offset) = (t_CKINT)bf1_obj;
}

// implementation for the default constructor
CK_DLL_CTOR(bformat1_ctor2)
{
    // get the offset where we'll store our internal c++ class pointer
    OBJ_MEMBER_INT(SELF, bformat1_data_offset) = 0;

    t_CKFLOAT temp = GET_NEXT_FLOAT(ARGS);

    // instantiate our internal c++ class representation
    BFormat1* bf1_obj = new BFormat1(API->vm->srate(VM));

    bf1_obj->setGain(temp);

    // store the pointer in the ChucK object member
    OBJ_MEMBER_INT(SELF, bformat1_data_offset) = (t_CKINT)bf1_obj;
}

// implementation for the destructor
CK_DLL_DTOR(bformat1_dtor)
{
    // get our c++ class pointer
    BFormat1 *bf1_obj = (BFormat1 *)OBJ_MEMBER_INT(SELF, bformat1_data_offset);
    // clean up (this macro tests for NULL, deletes, and zeros out the variable)
    CK_SAFE_DELETE(bf1_obj);
    // set the data field to 0
    OBJ_MEMBER_INT(SELF, bformat1_data_offset) = 0;
}

// implementation for tick function (relevant only for UGens)
CK_DLL_TICKF(bformat1_tickf)
{
    // get our c++ class pointer
    BFormat1 *bf1_obj = (BFormat1 *)OBJ_MEMBER_INT(SELF, bformat1_data_offset);

    // invoke our tick function; store in the magical out variable
    if (bf1_obj)
        bf1_obj->tick(in, out, nframes);

    // yes
    return TRUE;
}

// example implementation for setter
CK_DLL_MFUN(bformat1_setGain)
{
    // get our c++ class pointer
    BFormat1 *bf1_obj = (BFormat1 *)OBJ_MEMBER_INT(SELF, bformat1_data_offset);

    // get next argument
    // NOTE argument type must match what is specified above in CK_DLL_QUERY
    // NOTE this advances the ARGS pointer, so save in variable for re-use
    t_CKFLOAT arg1 = GET_NEXT_FLOAT(ARGS);

    // call setParam() and set the return value
    bf1_obj->setGain(arg1);
}

// example implementation for getter
CK_DLL_MFUN(bformat1_getGain)
{
    // get our c++ class pointer
    BFormat1 *bf1_obj = (BFormat1 *)OBJ_MEMBER_INT(SELF, bformat1_data_offset);

    // call getParam() and set the return value
    RETURN->v_float = bf1_obj->getGain();
}

// implementation for the default constructor
CK_DLL_CTOR(bformat2_ctor)
{
    // get the offset where we'll store our internal c++ class pointer
    OBJ_MEMBER_INT(SELF, bformat2_data_offset) = 0;

    // instantiate our internal c++ class representation
    BFormat2 *bf2_obj = new BFormat2(API->vm->srate(VM));

    // store the pointer in the ChucK object member
    OBJ_MEMBER_INT(SELF, bformat2_data_offset) = (t_CKINT)bf2_obj;
}

// implementation for the default constructor
CK_DLL_CTOR(bformat2_ctor2)
{
    // get the offset where we'll store our internal c++ class pointer
    OBJ_MEMBER_INT(SELF, bformat2_data_offset) = 0;

    t_CKFLOAT temp = GET_NEXT_FLOAT(ARGS);

    // instantiate our internal c++ class representation
    BFormat2* bf2_obj = new BFormat2(API->vm->srate(VM));

    bf2_obj->setGain(temp);

    // store the pointer in the ChucK object member
    OBJ_MEMBER_INT(SELF, bformat2_data_offset) = (t_CKINT)bf2_obj;
}

// implementation for the destructor
CK_DLL_DTOR(bformat2_dtor)
{
    // get our c++ class pointer
    BFormat2 *bf2_obj = (BFormat2 *)OBJ_MEMBER_INT(SELF, bformat2_data_offset);
    // clean up (this macro tests for NULL, deletes, and zeros out the variable)
    CK_SAFE_DELETE(bf2_obj);
    // set the data field to 0
    OBJ_MEMBER_INT(SELF, bformat2_data_offset) = 0;
}

// implementation for tick function (relevant only for UGens)
CK_DLL_TICKF(bformat2_tickf)
{
    // get our c++ class pointer
    BFormat2 *bf2_obj = (BFormat2 *)OBJ_MEMBER_INT(SELF, bformat2_data_offset);

    // invoke our tick function; store in the magical out variable
    if (bf2_obj)
        bf2_obj->tick(in, out, nframes);

    // yes
    return TRUE;
}

// example implementation for setter
CK_DLL_MFUN(bformat2_setGain)
{
    // get our c++ class pointer
    BFormat2 *bf2_obj = (BFormat2 *)OBJ_MEMBER_INT(SELF, bformat2_data_offset);

    // get next argument
    // NOTE argument type must match what is specified above in CK_DLL_QUERY
    // NOTE this advances the ARGS pointer, so save in variable for re-use
    t_CKFLOAT arg2 = GET_NEXT_FLOAT(ARGS);

    // call setParam() and set the return value
    bf2_obj->setGain(arg2);
}

// example implementation for getter
CK_DLL_MFUN(bformat2_getGain)
{
    // get our c++ class pointer
    BFormat2 *bf2_obj = (BFormat2 *)OBJ_MEMBER_INT(SELF, bformat2_data_offset);

    // call getParam() and set the return value
    RETURN->v_float = bf2_obj->getGain();
}

// implementation for the default constructor
CK_DLL_CTOR(bformat3_ctor)
{
    // get the offset where we'll store our internal c++ class pointer
    OBJ_MEMBER_INT(SELF, bformat3_data_offset) = 0;

    // instantiate our internal c++ class representation
    BFormat3 *bf3_obj = new BFormat3(API->vm->srate(VM));

    // store the pointer in the ChucK object member
    OBJ_MEMBER_INT(SELF, bformat3_data_offset) = (t_CKINT)bf3_obj;
}

// implementation for the default constructor
CK_DLL_CTOR(bformat3_ctor2)
{
    // get the offset where we'll store our internal c++ class pointer
    OBJ_MEMBER_INT(SELF, bformat3_data_offset) = 0;

    t_CKFLOAT temp = GET_NEXT_FLOAT(ARGS);

    // instantiate our internal c++ class representation
    BFormat3* bf3_obj = new BFormat3(API->vm->srate(VM));

    bf3_obj->setGain(temp);

    // store the pointer in the ChucK object member
    OBJ_MEMBER_INT(SELF, bformat3_data_offset) = (t_CKINT)bf3_obj;
}

// implementation for the destructor
CK_DLL_DTOR(bformat3_dtor)
{
    // get our c++ class pointer
    BFormat3 *bf3_obj = (BFormat3 *)OBJ_MEMBER_INT(SELF, bformat3_data_offset);
    // clean up (this macro tests for NULL, deletes, and zeros out the variable)
    CK_SAFE_DELETE(bf3_obj);
    // set the data field to 0
    OBJ_MEMBER_INT(SELF, bformat3_data_offset) = 0;
}

// implementation for tick function (relevant only for UGens)
CK_DLL_TICKF(bformat3_tickf)
{
    // get our c++ class pointer
    BFormat3 *bf3_obj = (BFormat3 *)OBJ_MEMBER_INT(SELF, bformat3_data_offset);

    // invoke our tick function; store in the magical out variable
    if (bf3_obj)
        bf3_obj->tick(in, out, nframes);

    // yes
    return TRUE;
}

// example implementation for setter
CK_DLL_MFUN(bformat3_setGain)
{
    // get our c++ class pointer
    BFormat3 *bf3_obj = (BFormat3 *)OBJ_MEMBER_INT(SELF, bformat3_data_offset);

    // get next argument
    // NOTE argument type must match what is specified above in CK_DLL_QUERY
    // NOTE this advances the ARGS pointer, so save in variable for re-use
    t_CKFLOAT arg3 = GET_NEXT_FLOAT(ARGS);

    // call setParam() and set the return value
    bf3_obj->setGain(arg3);
}

// example implementation for getter
CK_DLL_MFUN(bformat3_getGain)
{
    // get our c++ class pointer
    BFormat3 *bf3_obj = (BFormat3 *)OBJ_MEMBER_INT(SELF, bformat3_data_offset);

    // call getParam() and set the return value
    RETURN->v_float = bf3_obj->getGain();
}

// implementation for the default constructor
CK_DLL_CTOR(bformat4_ctor)
{
    // get the offset where we'll store our internal c++ class pointer
    OBJ_MEMBER_INT(SELF, bformat4_data_offset) = 0;

    // instantiate our internal c++ class representation
    BFormat4 *bf4_obj = new BFormat4(API->vm->srate(VM));

    // store the pointer in the ChucK object member
    OBJ_MEMBER_INT(SELF, bformat4_data_offset) = (t_CKINT)bf4_obj;
}

// implementation for the default constructor
CK_DLL_CTOR(bformat4_ctor2)
{
    // get the offset where we'll store our internal c++ class pointer
    OBJ_MEMBER_INT(SELF, bformat4_data_offset) = 0;

    t_CKFLOAT temp = GET_NEXT_FLOAT(ARGS);

    // instantiate our internal c++ class representation
    BFormat4* bf4_obj = new BFormat4(API->vm->srate(VM));

    bf4_obj->setGain(temp);

    // store the pointer in the ChucK object member
    OBJ_MEMBER_INT(SELF, bformat4_data_offset) = (t_CKINT)bf4_obj;
}

// implementation for the destructor
CK_DLL_DTOR(bformat4_dtor)
{
    // get our c++ class pointer
    BFormat4 *bf4_obj = (BFormat4 *)OBJ_MEMBER_INT(SELF, bformat4_data_offset);
    // clean up (this macro tests for NULL, deletes, and zeros out the variable)
    CK_SAFE_DELETE(bf4_obj);
    // set the data field to 0
    OBJ_MEMBER_INT(SELF, bformat4_data_offset) = 0;
}

// implementation for tick function (relevant only for UGens)
CK_DLL_TICKF(bformat4_tickf)
{
    // get our c++ class pointer
    BFormat4 *bf4_obj = (BFormat4 *)OBJ_MEMBER_INT(SELF, bformat4_data_offset);

    // invoke our tick function; store in the magical out variable
    if (bf4_obj)
        bf4_obj->tick(in, out, nframes);

    // yes
    return TRUE;
}

// example implementation for setter
CK_DLL_MFUN(bformat4_setGain)
{
    // get our c++ class pointer
    BFormat4 *bf4_obj = (BFormat4 *)OBJ_MEMBER_INT(SELF, bformat4_data_offset);

    // get next argument
    // NOTE argument type must match what is specified above in CK_DLL_QUERY
    // NOTE this advances the ARGS pointer, so save in variable for re-use
    t_CKFLOAT arg4 = GET_NEXT_FLOAT(ARGS);

    // call setParam() and set the return value
    bf4_obj->setGain(arg4);
}

// example implementation for getter
CK_DLL_MFUN(bformat4_getGain)
{
    // get our c++ class pointer
    BFormat4 *bf4_obj = (BFormat4 *)OBJ_MEMBER_INT(SELF, bformat4_data_offset);

    // call getParam() and set the return value
    RETURN->v_float = bf4_obj->getGain();
}

// implementation for the default constructor
CK_DLL_CTOR(bformat5_ctor)
{
    // get the offset where we'll store our internal c++ class pointer
    OBJ_MEMBER_INT(SELF, bformat5_data_offset) = 0;

    // instantiate our internal c++ class representation
    BFormat5 *bf5_obj = new BFormat5(API->vm->srate(VM));

    // store the pointer in the ChucK object member
    OBJ_MEMBER_INT(SELF, bformat5_data_offset) = (t_CKINT)bf5_obj;
}

// implementation for the default constructor
CK_DLL_CTOR(bformat5_ctor2)
{
    // get the offset where we'll store our internal c++ class pointer
    OBJ_MEMBER_INT(SELF, bformat4_data_offset) = 0;

    t_CKFLOAT temp = GET_NEXT_FLOAT(ARGS);

    // instantiate our internal c++ class representation
    BFormat4* bf4_obj = new BFormat4(API->vm->srate(VM));

    bf4_obj->setGain(temp);

    // store the pointer in the ChucK object member
    OBJ_MEMBER_INT(SELF, bformat4_data_offset) = (t_CKINT)bf4_obj;
}

// implementation for the destructor
CK_DLL_DTOR(bformat5_dtor)
{
    // get our c++ class pointer
    BFormat5 *bf5_obj = (BFormat5 *)OBJ_MEMBER_INT(SELF, bformat5_data_offset);
    // clean up (this macro tests for NULL, deletes, and zeros out the variable)
    CK_SAFE_DELETE(bf5_obj);
    // set the data field to 0
    OBJ_MEMBER_INT(SELF, bformat5_data_offset) = 0;
}

// implementation for tick function (relevant only for UGens)
CK_DLL_TICKF(bformat5_tickf)
{
    // get our c++ class pointer
    BFormat5 *bf5_obj = (BFormat5 *)OBJ_MEMBER_INT(SELF, bformat5_data_offset);

    // invoke our tick function; store in the magical out variable
    if (bf5_obj)
        bf5_obj->tick(in, out, nframes);

    // yes
    return TRUE;
}

// example implementation for setter
CK_DLL_MFUN(bformat5_setGain)
{
    // get our c++ class pointer
    BFormat5 *bf5_obj = (BFormat5 *)OBJ_MEMBER_INT(SELF, bformat5_data_offset);

    // get next argument
    // NOTE argument type must match what is specified above in CK_DLL_QUERY
    // NOTE this advances the ARGS pointer, so save in variable for re-use
    t_CKFLOAT arg5 = GET_NEXT_FLOAT(ARGS);

    // call setParam() and set the return value
    bf5_obj->setGain(arg5);
}

// example implementation for getter
CK_DLL_MFUN(bformat5_getGain)
{
    // get our c++ class pointer
    BFormat5 *bf5_obj = (BFormat5 *)OBJ_MEMBER_INT(SELF, bformat5_data_offset);

    // call getParam() and set the return value
    RETURN->v_float = bf5_obj->getGain();
}

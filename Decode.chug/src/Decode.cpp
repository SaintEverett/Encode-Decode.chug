//-----------------------------------------------------------------------------
// Entaro ChucK Developer!
// This is a chugin boilerplate, generated by chuginate!
//-----------------------------------------------------------------------------
// NOTE by default, chuginate generates a new UGen subclass in this file
//      but it is possible, of course, to create non-UGen classes in a chugin!
// To modify this generated file for a non-UGen class...
//      1. in QUERY->begin_class(), change "UGen" to a different ChucK class
//         (e.g., `QUERY->begin_class(QUERY, "Decode", "Object");`)
//      2. remove or commment out the line containing QUERY->add_ugen_func()
//      3. that's it; the rest is no different for UGens/non-UGens
//-----------------------------------------------------------------------------
// 
//    matrix multi
// 
//                                           [w_0, w_1, w_2, w_3]
//                                           [y_0, y_1, y_2, y_3]
//         [x_in, y_in, x_in, z_in]     *    [x_0, x_1, x_2, x_3]  =  [w_out, y_out, x_out, z_out]
//                                           [z_0, z_1, z_2, z_3]
// 
//-----------------------------------------------------------------------------
// happy chucking & chugging!
//-----------------------------------------------------------------------------

// include chugin header
#include "chugin.h"                             

// general includes
#include <iostream>
#include <limits.h>
#include <math.h>

// declaration of chugin constructor
CK_DLL_CTOR( decode_ctor );
// declaration of chugin desctructor
CK_DLL_DTOR( decode_dtor );

// example of getter/setter
CK_DLL_MFUN( decode_setParam );
CK_DLL_MFUN( decode_getParam );

// for chugins extending UGen, this is mono synthesis function for 1 sample
CK_DLL_TICK( decode_tickf );

// this is a special offset reserved for chugin internal data
t_CKINT decode1_data_offset = 0;


//-----------------------------------------------------------------------------
// class definition for internal chugin data
// (NOTE this isn't strictly necessary, but is one example of a recommended approach)
//-----------------------------------------------------------------------------
class DecodeN                                                                             
{                                                                                         
public:                                                                                   
    // constructor                                                                        
    DecodeN( t_CKFLOAT fs, t_CKUINT in_chans, t_CKUINT out_chans ) :
    in_count(in_chans), out_count(out_chans)
    {                                                                                     
        ;                                                                      
    }

    // for chugins extending UGen
    SAMPLE tickf( SAMPLE* in, SAMPLE* out, int nframes )
    {
        // default: this passes whatever input is patched into chugin
        return in;
    }
    
    void set_coefficients(CK_DL_API API, Chuck_ArrayInt& multi_coefficients)
    {
         ;
    }


    // get parameter example
    t_CKFLOAT getParam() { return m_param; }
    
protected:
    // instance data
    t_CKUINT in_count = 0;
    t_CKUINT out_count = 0;
};


class Decode1 : public DecodeN
{
public:
    Decode1(t_CKFLOAT fs, t_CKUINT num_out_chan) : DecodeN(fs, 4, num_out_chan)
    {
        ;
    }
};

//-----------------------------------------------------------------------------
// info function: ChucK calls this when loading/probing the chugin
// NOTE: please customize these info fields below; they will be used for
// chugins loading, probing, and package management and documentation
//-----------------------------------------------------------------------------
CK_DLL_INFO( Decode )
{
    // the version string of this chugin, e.g., "v1.2.1"
    QUERY->setinfo( QUERY, CHUGIN_INFO_CHUGIN_VERSION, "" );
    // the author(s) of this chugin, e.g., "Alice Baker & Carl Donut"
    QUERY->setinfo( QUERY, CHUGIN_INFO_AUTHORS, "" );
    // text description of this chugin; what is it? what does it do? who is it for?
    QUERY->setinfo( QUERY, CHUGIN_INFO_DESCRIPTION, "" );
    // (optional) URL of the homepage for this chugin
    QUERY->setinfo( QUERY, CHUGIN_INFO_URL, "" );
    // (optional) contact email
    QUERY->setinfo( QUERY, CHUGIN_INFO_EMAIL, "" );
}


//-----------------------------------------------------------------------------
// query function: ChucK calls this when loading the chugin
// modify this function to define this chugin's API and language extensions
//-----------------------------------------------------------------------------
CK_DLL_QUERY( Decode )
{
    // generally, don't change this...
    QUERY->setname( QUERY, "Decode" );

    // ------------------------------------------------------------------------
    // begin class definition(s); will be compiled, verified,
    // and added to the chuck host type system for use
    // ------------------------------------------------------------------------
    // NOTE to create a non-UGen class, change the second argument
    // to extend a different ChucK class (e.g., "Object")
    QUERY->begin_class( QUERY, "Decode", "UGen" );

    // register default constructor
    QUERY->add_ctor( QUERY, decode_ctor );
    // NOTE constructors can be overloaded like any other functions,
    // each overloaded constructor begins with `QUERY->add_ctor()`
    // followed by a sequence of `QUERY->add_arg()`

    // register the destructor (probably no need to change)
    QUERY->add_dtor( QUERY, decode_dtor );

    // for UGens only: add tick function
    // NOTE a non-UGen class should remove or comment out this next line
    QUERY->add_ugen_func( QUERY, decode_tickf, NULL, 1, 1 );
    // NOTE: if this is to be a UGen with more than 1 channel,
    // e.g., a multichannel UGen -- will need to use add_ugen_funcf()
    // and declare a tickf function using CK_DLL_TICKF

    // example of adding setter method
    QUERY->add_mfun( QUERY, decode_setParam, "float", "param" );
    // example of adding argument to the above method
    QUERY->add_arg( QUERY, "float", "arg" );

    // example of adding getter method
    QUERY->add_mfun( QUERY, decode_getParam, "float", "param" );
    
    // this reserves a variable in the ChucK internal class to store 
    // referene to the c++ class we defined above
    decode_data_offset = QUERY->add_mvar( QUERY, "int", "@d_data", false );

    // ------------------------------------------------------------------------
    // end the class definition
    // IMPORTANT: this MUST be called to each class definition!
    // ------------------------------------------------------------------------
    QUERY->end_class( QUERY );

    // wasn't that a breeze?
    return TRUE;
}


// implementation for the default constructor
CK_DLL_CTOR( decode_ctor )
{
    // get the offset where we'll store our internal c++ class pointer
    OBJ_MEMBER_INT( SELF, decode_data_offset ) = 0;
    
    // instantiate our internal c++ class representation
    Decode * d_obj = new Decode( API->vm->srate(VM) );
    
    // store the pointer in the ChucK object member
    OBJ_MEMBER_INT( SELF, decode_data_offset ) = (t_CKINT)d_obj;
}


// implementation for the destructor
CK_DLL_DTOR( decode_dtor )
{
    // get our c++ class pointer
    Decode * d_obj = (Decode *)OBJ_MEMBER_INT( SELF, decode_data_offset );
    // clean up (this macro tests for NULL, deletes, and zeros out the variable)
    CK_SAFE_DELETE( d_obj );
    // set the data field to 0
    OBJ_MEMBER_INT( SELF, decode_data_offset ) = 0;
}


// implementation for tick function (relevant only for UGens)
CK_DLL_TICKF( decode_tickf )
{
    // get our c++ class pointer
    Decode * d_obj = (Decode *)OBJ_MEMBER_INT(SELF, decode_data_offset);
 
    // invoke our tick function; store in the magical out variable
    if( d_obj ) *out = d_obj->tickf( in, out, nframes );

    // yes
    return TRUE;
}


CK_DLL_MFUN(set_coefficients)
{
    Decode1* decode_obj = (Decode1*)OBJ_MEMBER_UINT(SELF, decode1_data_offset);
    Chuck_ArrayInt* speak_coefficients = (Chuck_ArrayInt*)GET_NEXT_OBJECT(ARGS);
    decode_obj->set_coefficients(API, *speak_coefficients);
}
//-----------------------------------------------------------------------------
// Entaro ChucK Developer!
// This is a chugin boilerplate, generated by chuginate!
//-----------------------------------------------------------------------------
// NOTE by default, chuginate generates a new UGen subclass in this file
//      but it is possible, of course, to create non-UGen classes in a chugin!
// To modify this generated file for a non-UGen class...
//      1. in QUERY->begin_class(), change "UGen" to a different ChucK class
//         (e.g., `QUERY->begin_class(QUERY, "DBDN", "Object");`)
//      2. remove or commment out the line containing QUERY->add_ugen_func()
//      3. that's it; the rest is no different for UGens/non-UGens
//-----------------------------------------------------------------------------
// NOTE once you have built this into a chugin (DBDN.chug), here are a few
//      helpful tools for testing / probing / verifying your new chugin!
//
// chuginate also generated a DBDN-test.ck boilerplate ChucK program
//      to help test your chugin (see DBDN-test.ck for more instructions)
//
// run `chuck --chugin-probe` to probe what chugins would be loaded, and
//      from where in the chugin search paths
//
// run `chuck -v3 --loop` to see what chugins are actually loaded at runtime,
//      with more info and error reporting than with --chugin-probe
//
// other helpful chugin-related flags include:
//      --chugin:<filename>
//      --chugin-path:(path) / -G(path)
//      --chugin-load:{on/off}
//
// for more information on command-line options:
//      https://chuck.stanford.edu/doc/program/options.html
// for more information on chugins:
//      https://chuck.stanford.edu/extend/
//-----------------------------------------------------------------------------
// happy chucking & chugging!
//-----------------------------------------------------------------------------

// include chugin header
#include "chugin.h"
#include "DBDN.h"


// declaration of chugin constructor
CK_DLL_CTOR(dbdn_ctor);
// declaration of chugin desctructor
CK_DLL_DTOR(dbdn_dtor);
CK_DLL_MFUN(dbdn_setSpeakers);

// example of getter/setter
CK_DLL_MFUN(dbdn_setParam);
CK_DLL_MFUN(dbdn_getParam);

// for chugins extending UGen, this is mono synthesis function for 1 sample
CK_DLL_TICKF(dbdn_tickf);

// this is a special offset reserved for chugin internal data
t_CKINT dbdn_data_offset = 0;


//-----------------------------------------------------------------------------
// info function: ChucK calls this when loading/probing the chugin
// NOTE: please customize these info fields below; they will be used for
// chugins loading, probing, and package management and documentation
//-----------------------------------------------------------------------------
CK_DLL_INFO( DBDN )
{
    // the version string of this chugin, e.g., "v1.2.1"
    QUERY->setinfo( QUERY, CHUGIN_INFO_CHUGIN_VERSION, "" );
    // the author(s) of this chugin, e.g., "Alice Baker & Carl Donut"
    QUERY->setinfo( QUERY, CHUGIN_INFO_AUTHORS, "" );
    // text description of this chugin; what is it? what does it do? who is it for?
    QUERY->setinfo( QUERY, CHUGIN_INFO_DESCRIPTION, "" );
    // (optional) URL of the homepage for this chugin
    QUERY->setinfo( QUERY, CHUGIN_INFO_URL, "" );
    // (optional) contact email
    QUERY->setinfo( QUERY, CHUGIN_INFO_EMAIL, "" );
}


//-----------------------------------------------------------------------------
// query function: ChucK calls this when loading the chugin
// modify this function to define this chugin's API and language extensions
//-----------------------------------------------------------------------------
CK_DLL_QUERY( DBDN )
{
    // generally, don't change this...
    QUERY->setname( QUERY, "DBDN" );

    // ------------------------------------------------------------------------
    // begin class definition(s); will be compiled, verified,
    // and added to the chuck host type system for use
    // ------------------------------------------------------------------------
    // NOTE to create a non-UGen class, change the second argument
    // to extend a different ChucK class (e.g., "Object")
    QUERY->begin_class( QUERY, "DBDN", "UGen" );

    // register default constructor
    QUERY->add_ctor( QUERY, dbdn_ctor );
    // NOTE constructors can be overloaded like any other functions,
    // each overloaded constructor begins with `QUERY->add_ctor()`
    // followed by a sequence of `QUERY->add_arg()`

    // register the destructor (probably no need to change)
    QUERY->add_dtor( QUERY, dbdn_dtor );
    QUERY->add_mfun(QUERY, dbdn_setSpeakers, "void", "placement");
    QUERY->add_arg(QUERY, "float[][]", "");

    // for UGens only: add tick function
    // NOTE a non-UGen class should remove or comment out this next line
    QUERY->add_ugen_funcf(QUERY, dbdn_tickf, NULL, 4, 4);
    // example of adding setter method
    QUERY->add_mfun(QUERY, dbdn_setParam, "float", "param");
    // example of adding argument to the above method
    QUERY->add_arg(QUERY, "float", "arg");

    // example of adding getter method
    QUERY->add_mfun(QUERY, dbdn_getParam, "float", "param");
    
    // this reserves a variable in the ChucK internal class to store 
    // referene to the c++ class we defined above
    dbdn_data_offset = QUERY->add_mvar(QUERY, "int", "@dbdn_data", false);

    // ------------------------------------------------------------------------
    // end the class definition
    // IMPORTANT: this MUST be called to each class definition!
    // ------------------------------------------------------------------------
    QUERY->end_class( QUERY );

    // wasn't that a breeze?
    return TRUE;
}


// implementation for the default constructor
CK_DLL_CTOR( dbdn_ctor )
{
    // get the offset where we'll store our internal c++ class pointer
    OBJ_MEMBER_INT( SELF, dbdn_data_offset ) = 0;
    
    // instantiate our internal c++ class representation
    DBDN<1>* dbdn_obj = new DBDN<1>( API->vm->srate(VM) );
    
    // store the pointer in the ChucK object member
    OBJ_MEMBER_INT( SELF, dbdn_data_offset ) = (t_CKINT)dbdn_obj;
}


// implementation for the destructor
CK_DLL_DTOR( dbdn_dtor )
{
    // get our c++ class pointer
    DBDN<1>* dbdn_obj = (DBDN<1> *)OBJ_MEMBER_INT( SELF, dbdn_data_offset );
    // clean up (this macro tests for NULL, deletes, and zeros out the variable)
    CK_SAFE_DELETE( dbdn_obj );
    // set the data field to 0
    OBJ_MEMBER_INT( SELF, dbdn_data_offset ) = 0;
}


// implementation for tick function (relevant only for UGens)
CK_DLL_TICKF( dbdn_tickf )
{
    // get our c++ class pointer
    DBDN<1> * dbdn_obj = (DBDN<1> *)OBJ_MEMBER_INT(SELF, dbdn_data_offset);
 
    // invoke our tick function; store in the magical out variable
    if( dbdn_obj ) dbdn_obj->tick( in, out, nframes );

    // yes
    return TRUE;
}

CK_DLL_MFUN(dbdn_setSpeakers)
{
    Chuck_Object* multi_array = GET_NEXT_OBJECT(ARGS);
    // get our c++ class pointer
    DBDN<1>* dbdn_obj = (DBDN<1>*)OBJ_MEMBER_INT(SELF, dbdn_data_offset);
    if (dbdn_obj)
    {
        dbdn_obj->CKsetSpeakAngles(multi_array, API);
    }
}


// example implementation for setter
CK_DLL_MFUN( dbdn_setParam )
{
    // get our c++ class pointer
    DBDN<1>* dbdn_obj = (DBDN<1> *)OBJ_MEMBER_INT( SELF, dbdn_data_offset );

    // get next argument
    // NOTE argument type must match what is specified above in CK_DLL_QUERY
    // NOTE this advances the ARGS pointer, so save in variable for re-use
    t_CKFLOAT arg1 = GET_NEXT_FLOAT( ARGS );
    
    // call setParam() and set the return value
    RETURN->v_float = 0;
}


// example implementation for getter
CK_DLL_MFUN(dbdn_getParam)
{
    // get our c++ class pointer
    DBDN<1>* dbdn_obj = (DBDN<1> *)OBJ_MEMBER_INT( SELF, dbdn_data_offset );

    // call getParam() and set the return value
    RETURN->v_float = 0;
}
